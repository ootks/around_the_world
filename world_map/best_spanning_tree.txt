from countries_adjacency import EurasianVertices, EurasianEdges
import networkx
import pygame

tree = {('Vietnam', 'Cambodia'), ('Russia', 'Belarus'), ('India', 'Bhutan'), ('Mali', 'Burkina Faso'), ('North Macedonia', 'Greece'), ('Tajikistan', 'Afghanistan'), ('Germany', 'Denmark'), ('Ukraine', 'Slovakia'), ('Thailand', 'Myanmar'), ('Syria', 'Iraq'), ('Kosovo', 'Albania'), ('Spain', 'Portugal'), ('Republic of the Congo', 'Democratic Republic of the Congo'), ('Western Sahara', 'Mauritania'), ('Sudan', 'Egypt'), ('Georgia', 'Armenia'), ('Morocco', 'Algeria'), ('Luxembourg', 'Belgium'), ('Chad', 'Central African Republic'), ('Turkey', 'Georgia'), ('Luxembourg', 'Germany'), ('India', 'Bangladesh'), ('Myanmar', 'Bangladesh'), ('Lithuania', 'Latvia'), ('United Arab Emirates', 'Oman'), ('Syria', 'Jordan'), ('Malaysia', 'Brunei'), ('Hungary', 'Austria'), ('Gabon', 'Equatorial Guinea'), ('Nepal', 'China'), ('France', 'Andorra'), ('Germany', 'Austria'), ('Spain', 'Morocco'), ('Gaza Strip', 'Egypt'), ('Israel', 'Egypt'), ('Sierra Leone', 'Liberia'), ('Azerbaijan', 'Armenia'), ('Iran', 'Azerbaijan'), ('Montenegro', 'Bosnia and Herzegovina'), ('Liberia', 'Ivory Coast'), ('West Bank', 'Jordan'), ('Senegal', 'Mauritania'), ('San Marino', 'Italy'), ('Zimbabwe', 'South Africa'), ('Malaysia', 'Indonesia'), ('South Africa', 'Lesotho'), ('Equatorial Guinea', 'Cameroon'), ('Republic of the Congo', 'Gabon'), ('Kuwait', 'Iraq'), ('Namibia', 'Angola'), ('Nigeria', 'Niger'), ('Senegal', 'Mali'), ('Sudan', 'Eritrea'), ('Sierra Leone', 'Guinea'), ('Saudi Arabia', 'Kuwait'), ('Switzerland', 'Liechtenstein'), ('Indonesia', 'East Timor'), ('Romania', 'Hungary'), ('Somalia', 'Djibouti'), ('Kyrgyzstan', 'Kazakhstan'), ('Spain', 'Gibraltar'), ('South Korea', 'North Korea'), ('Namibia', 'Botswana'), ('Serbia', 'Kosovo'), ('Pakistan', 'Afghanistan'), ('Tanzania', 'Burundi'), ('Tunisia', 'Algeria'), ('Uzbekistan', 'Kazakhstan'), ('Thailand', 'Laos'), ('Russia', 'Norway'), ('Thailand', 'Malaysia'), ('Pakistan', 'India'), ('Slovenia', 'Croatia'), ('Serbia', 'Bosnia and Herzegovina'), ('Nigeria', 'Benin'), ('Ethiopia', 'Djibouti'), ('Uganda', 'Kenya'), ('Switzerland', 'Italy'), ('North Macedonia', 'Bulgaria'), ('Niger', 'Libya'), ('Poland', 'Lithuania'), ('Switzerland', 'France'), ('North Macedonia', 'Albania'), ('Togo', 'Benin'), ('Montenegro', 'Croatia'), ('Turkmenistan', 'Iran'), ('China', 'Bhutan'), ('Uganda', 'Rwanda'), ('Turkey', 'Iraq'), ('Syria', 'Lebanon'), ('Mozambique', 'Malawi'), ('Saudi Arabia', 'Qatar'), ('South Africa', 'Eswatini'), ('Liechtenstein', 'Austria'), ('Netherlands', 'Belgium'), ('Vatican City', 'Italy'), ('Latvia', 'Estonia'), ('Zimbabwe', 'Zambia'), ('Ivory Coast', 'Burkina Faso'), ('Lebanon', 'Israel'), ('Rwanda', 'Burundi'), ('Tajikistan', 'Kyrgyzstan'), ('Poland', 'Czech Republic'), ('Ethiopia', 'Eritrea'), ('Mozambique', 'Eswatini'), ('Sweden', 'Norway'), ('Norway', 'Finland'), ('United Arab Emirates', 'Saudi Arabia'), ('Togo', 'Burkina Faso'), ('Russia', 'Mongolia'), ('Libya', 'Chad'), ('North Korea', 'China'), ('Senegal', 'Gambia'), ('Uzbekistan', 'Turkmenistan'), ('Central African Republic', 'Cameroon'), ('Yemen', 'Oman'), ('Togo', 'Ghana'), ('Turkey', 'Greece'), ('Democratic Republic of the Congo', 'Angola'), ('Slovakia', 'Czech Republic'), ('Romania', 'Bulgaria'), ('Ukraine', 'Hungary'), ('Vietnam', 'Laos'), ('Tanzania', 'Malawi'), ('Papua New Guinea', 'Indonesia'), ('Western Sahara', 'Algeria'), ('Somalia', 'Kenya'), ('Monaco', 'France'), ('Romania', 'Moldova'), ('Latvia', 'Belarus'), ('Zambia', 'Botswana'), ('Guinea-Bissau', 'Guinea'), ('Sudan', 'South Sudan')}

def make_branches(tree):
    G = networkx.Graph()
    G.add_edges_from(tree)

    branches = dict()
    for vertex in G:
        neighbors = list(G.neighbors(vertex))
        if len(neighbors) == 1: # Found a leaf
            branches[vertex] = [vertex] # Only vertex found so far is vertex
            neighbor = neighbors[0] # Get the only neighbor of vertex
            branches[vertex].append(neighbor) # Add the neighbor of vertex to the branch
            prev_vertex = vertex
            next_neighbors = list(G.neighbors(neighbor))
            # Keep going along the branch until we get to a vertex that has degree
            # more than 2.
            while len(next_neighbors) == 2:
                # Find the neighbor that isn't the previous vertex.
                next_neighbor = (set(next_neighbors) - {prev_vertex}).pop()
                branches[vertex].append(next_neighbor)
                prev_vertex = neighbor
                neighbor = next_neighbor
                next_neighbors = list(G.neighbors(next_neighbor))
    return branches

def get_options(graph, branches):
    replacement = dict()
    for leaf in branches:
        replacement[leaf] = set(graph.neighbors(leaf)) - set(branches[leaf])
    print(replacement)
    return replacement

BigG = networkx.Graph()
BigG.add_edges_from(EurasianEdges)
    
def improve(tree):
    branches = make_branches(tree)

    options = get_options(BigG, branches)
    for leaf, option_set in options.items():
        if len(option_set) == 0:
            continue
        replacement = option_set.pop() 
        node = branches[leaf][-1]
        next_node = branches[leaf][-2]
        return (tree - {(node, next_node), (next_node, node)}).union({(leaf, replacement)})
    return tree
    
G = networkx.Graph()
G.add_edges_from(tree)
print(len([0 for x in G if len(list(G.neighbors(x))) == 3]))
for i in range(11):
    tree = improve(tree)
    G = networkx.Graph()
    G.add_edges_from(tree)
    print(len([0 for x in G if len(list(G.neighbors(x))) == 3]))

G = networkx.Graph()
G.add_edges_from(tree)
print(len([0 for x in G if len(list(G.neighbors(x))) == 3]))

print(tree)

# screen = pygame.display.set_mode((640, 480))
# 
# 
# G = networkx.Graph()
# G.add_edges_from(tree)
# # Pick a vertex at random
# start = "South Africa"
# # Find the distance of each other vertex from that starting vertex (this is the x coordinate of the vertex)
# lengths = networkx.shortest_path_length(G, source = start)
# ordered_vertices = sorted(lengths.keys(), key=lambda x: lengths[x])
# children = dict()
# # For each vertex, find the number of leaves under that vertex. (This can be done by undoing the ordering of the vertices).
# ordered_vertices.reverse()
# for vertex in ordered_vertices:
#     if len(list(G.neighbors(vertex))) == 1:
#        children[vertex] = 1
#     else:
#         children[vertex] = 0
#         for neighbor in G.neighbors(vertex):
#             # If the neighbor is a child of vertex, then add to children
#             if lengths[neighbor] > lengths[vertex]:
#                 children[vertex] += children[neighbor]
# 
# ordered_vertices.reverse()
# 
# print(lengths)
#                 
